trigger: none
pr: none

schedules:
- cron: "0 23 * * *"
  displayName: Nightly build
  branches:
    include:
    - main

parameters:
- name: version
  displayName: Release Version
  type: string
  default: ''
- name: releaseNotes
  displayName: Release Notes
  type: string
  default: 'Latest nightly build. **Note that this is likely to have bugs and we recommend you use a regular release instead!**'

name: 0.3.pre.$(Rev:r)

variables:
  - name: Version
    ${{ if ne(parameters['version'], '') }}:
      value: ${{ parameters.version }}
    ${{ if eq(parameters['version'], '') }}:
      value: $(Build.BuildNumber)
  - name: AssemblyVersion
    ${{ if ne(parameters['version'], '') }}:
      value: ${{ parameters.version }}
    ${{ if eq(parameters['version'], '') }}:
      value: ${{ replace(variables['Build.BuildNumber'], 'pre', '9999') }}

stages:
- stage: Build
  jobs:
  # - job:
  #   strategy:
  #     matrix:
  #       Linux:
  #         imageName: 'ubuntu-latest'
  #         artifactName: 'Linux-v$(Version)'
  #         framework: 'net8.0'
  #         rid: 'linux-x64'
  #         artifactFile: 'publish.zip'
  #       Windows:
  #         imageName: 'windows-latest'
  #         artifactName: 'Windows-v$(Version)'
  #         framework: 'net8.0-windows'
  #         rid: 'win-x64'
  #         artifactFile: 'publish.zip'
  #   displayName: Build & Publish
  #   pool:
  #     vmImage: $(imageName)
  #   steps:
  #   - checkout: self
  #     clean: true
  #   - task: DotNetCoreCLI@2
  #     inputs:
  #       command: 'publish'
  #       projects: $(Build.SourcesDirectory)/src/SerialLoops/SerialLoops.csproj
  #       arguments: '-c Release -f $(framework) -r $(rid) --self-contained /p:DebugType=None /p:DebugSymbols=false /p:PublishSingleFile=true'
  #       publishWebProjects: false
  #     env:
  #       SLVersion: $(Version)
  #       SLAssemblyVersion: $(AssemblyVersion)
  #     displayName: Build & Publish Serial Loops
  #   - task: PublishBuildArtifacts@1
  #     inputs:
  #       PathtoPublish: '$(Build.SourcesDirectory)/src/SerialLoops/bin/Release/$(framework)/$(rid)/$(artifactFile)'
  #       ArtifactName: '$(artifactName)'
  #       publishLocation: 'Container'
  #     displayName: Publish build artifact

  - job:
    strategy:
      matrix:
        x64:
          artifactName: 'macOS-x64-v$(Version)'
          rid: 'osx-x64'
        arm64:
          artifactName: 'macOS-arm-v$(Version)'
          rid: 'osx-arm64'
    displayName: Build & Publish macOS
    pool:
      vmImage: macos-latest
    steps:
    - checkout: self
      clean: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'custom'
        custom: 'restore'
        arguments: '$(Build.SourcesDirectory)/src/SerialLoops/SerialLoops.csproj -r $(rid)'
      displayName: Restore
    - task: DotNetCoreCLI@2
      inputs:
        command: 'custom'
        custom: 'msbuild'
        arguments: '$(Build.SourcesDirectory)/src/SerialLoops/SerialLoops.csproj -t:BundleApp -p:Configuration=Release -p:TargetFramework=net8.0 -p:RuntimeIdentifier=$(rid) -p:UseAppHost=true --p:SelfContained=true -p:DebugType=None -p:DebugSymbols=false -p:PublishSingleFile=true'
      env:
        SLVersion: $(Version)
        SLAssemblyVersion: $(AssemblyVersion)
      displayName: Build & Publish Serial Loops
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/src/SerialLoops/bin/Release/net8.0/$(rid)/publish.zip'
        ArtifactName: '$(artifactName)'
        publishLocation: 'Container'
      displayName: Publish build artifact

- stage: Package
  dependsOn: Build
  jobs:
  - job:
    strategy:
      matrix:
        macOS-x64:
          artifactName: 'macOS-x64-v$(Version)'
        macOS-arm64:
          artifactName: 'macOS-arm-v$(Version)'
    pool:
      vmImage: macos-latest
    steps:
    - checkout: self
      clean: true
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: $(artifactName)
        downloadPath: '$(Build.ArtifactStagingDirectory)'
      displayName: Download macOS zip artifact
    - script: python -m pip install macos-pkg-builder
      displayName: Install macos-pkg-builder pip package
    - script: |
        cd install/macos/
        python serial_loops_pkg_builder.py $SLVersion "$SLZip"
      env:
        SLVersion: $(Version)
        SLZip: "$(Build.ArtifactStagingDirectory)/$(artifactName)/Serial Loops.app.zip"
      displayName: Build macOS pkg installer
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(Build.SourcesDirectory)/install/macos/SerialLoops.pkg
        ArtifactName: $(artifactName)-installer
        publishLocation: 'Container'
      displayName: Publish macOS pkg installer
    displayName: Build macOS pkg

  - job:
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
      clean: true
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Linux-v$(Version)'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
      displayName: Download Linux zip artifact
    displayName: Build Linux flatpak

  - job:
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
      clean: true
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Linux-v$(Version)'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
      displayName: Download Linux zip artifact
    - pwsh: |
        Copy-Item -Path ./install/linux/dpkg-build -Destination ./dpkg-build -Recurse -Exclude ".gitkeep"
        New-Item -ItemType "directory" -Path ./dpkg-build/SerialLoops/usr -Name bin
        Push-Location ./dpkg-build/SerialLoops
        ((Get-Content -Path DEBIAN/control) -replace '#VERSION#', '$(Version)') | Set-Content -Path DEBIAN/control
        Expand-Archive $(Build.ArtifactStagingDirectory)/Linux-v$(Version)/publish.zip -DestinationPath $(Build.ArtifactStagingDirectory)/publish/
        Copy-Item -Path $(Build.ArtifactStagingDirectory)/publish/* -Destination ./usr/lib/SerialLoops -Recurse
        ln -s /usr/lib/SerialLoops/SerialLoops usr/bin/SerialLoops
        Set-Location ..
        dpkg-deb --build SerialLoops
        Pop-Location
      displayName: Create deb package
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/dpkg-build/SerialLoops.deb'
        ArtifactName: 'Linux-v$(Version)-deb'
        publishLocation: 'Container'
      displayName: Publish Linux deb
    displayName: Build Linux deb package

  - job:
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
      clean: true
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Linux-v$(Version)'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
      displayName: Download Linux zip artifact
    - pwsh: |
        Expand-Archive $(Build.ArtifactStagingDirectory)/Linux-v$(Version)/publish.zip -DestinationPath $(Build.ArtifactStagingDirectory)/publish/
        chmod +x $(Build.ArtifactStagingDirectory)/publish/SerialLoops
        Push-Location $(Build.ArtifactStagingDirectory)/publish
        tar -czvf ../publish.tar.gz --transform 's,^\.\/,,' .
        Pop-Location
      displayName: Create tar
    - pwsh: |
        Get-ChildItem $(Build.ArtifactStagingDirectory)
        ((Get-Content -Path ./install/linux/rpm/rpmbuild/SPECS/SerialLoops.spec) -Replace '#VERSION#', '$(Version)') | Set-Content -Path ./install/linux/rpm/rpmbuild/SPECS/SerialLoops.spec
        Copy-Item -Path $(Build.ArtifactStagingDirectory)/publish.tar.gz -Destination $(Build.SourcesDirectory)/install/linux/rpm/rpmbuild/SOURCES/SerialLoops-$(Version).tar.gz
        docker run -v $(Build.SourcesDirectory)/install/linux/rpm/rpm-scripts:/rpm-scripts -v $(Build.SourcesDirectory)/install/linux/rpm/rpmbuild:/root/rpmbuild fedora:39 /rpm-scripts/rpm-make.sh
      displayName: Build rpm
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/publish.tar.gz'
        ArtifactName: 'Linux-v$(Version)-tar'
        publishLocation: 'Container'
      displayName: Publish Linux tar
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourceDirectory)/install/linux/rpm/rpmbuild/RPMS/x86_64/SerialLoops-$(Version)-1.fc39.x86_64.rpm'
        ArtifactName: 'Linux-v$(Version)-rpm'
        publishLocation: 'Container'
      displayName: Publish Linux rpm
    displayName: Package Linux tar & build Linux rpm package


- stage: Publish
  dependsOn: Package
  jobs:
  - job:
    pool:
      vmImage: ubuntu-latest
    displayName: Create Pre-Release
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: Download Linux tar
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Linux-v$(Version)-tar'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - task: DownloadBuildArtifacts@0
      displayName: Download Linux deb
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Linux-v$(Version)-deb'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - task: DownloadBuildArtifacts@0
      displayName: Download Linux rpm
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Linux-v$(Version)-rpm'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - task: DownloadBuildArtifacts@0
      displayName: Download macOS x64 installer
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'macOS-x64-v$(Version)-installer'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - task: DownloadBuildArtifacts@0
      displayName: Download macOS ARM installer
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'macOS-arm-v$(Version)-installer'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - task: DownloadBuildArtifacts@0
      displayName: Download Windows zip
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Windows-v$(Version)'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - pwsh: |
        Move-Item -Path $(Build.ArtifactStagingDirectory)/Linux-v$(Version)-tar/publish.tar.gz -Destination $(Build.ArtifactStagingDirectory)/SerialLoops-linux-x64-v$(Version).tar.gz
        Move-Item -Path $(Build.ArtifactStagingDirectory)/Linux-v$(Version)-deb/SerialLoops.deb -Destination $(Build.ArtifactStagingDirectory)/SerialLoops-$(Version)_amd64.deb
        Move-Item -Path $(Build.ArtifactStagingDirectory)/Linux-v$(Version)-rpm/SerialLoops-$(Version)-1.fc39.x86_64.rpm -Destination $(Build.ArtifactStagingDirectory)/SerialLoops-$(Version)-1.fc39.x86_64.rpm
        Move-Item -Path "$(Build.ArtifactStagingDirectory)/macOS-x64-v$(Version)/SerialLoops.pkg" -Destination $(Build.ArtifactStagingDirectory)/SerialLoops-macOS-x64-v$(Version).pkg
        Move-Item -Path "$(Build.ArtifactStagingDirectory)/macOS-arm-v$(Version)/SerialLoops.pkg" -Destination $(Build.ArtifactStagingDirectory)/SerialLoops-macOS-arm-v$(Version).pkg
        Move-Item -Path $(Build.ArtifactStagingDirectory)/Windows-v$(Version)/publish.zip -Destination $(Build.ArtifactStagingDirectory)/SerialLoops-windows-x64-v$(Version).zip
      displayName: Move and rename artifacts
    # - task: GitHubRelease@1
    #   displayName: 'Create GitHub Pre-Release'
    #   inputs:
    #     gitHubConnection: 'GitHub Connection (Jonko)'
    #     tagSource: userSpecifiedTag
    #     tag: '$(Version)'
    #     title: 'Serial Loops v$(Version)'
    #     releaseNotesSource: inline
    #     releaseNotesInline: |
    #       ${{ parameters.releaseNotes }}

    #       ## Installation Notes
    #       Please ensure you have installed [devkitARM from devkitPro](https://devkitpro.org/wiki/Getting_Started) before using the program. Select the NDS Development workload when installing to do this.

    #       Additionally, to test the game you will need to have a Nintendo DS emulator installed. We recommend [melonDS](https://melonds.kuribo64.net/) for its accuracy.

    #       ### Windows
    #       There is currently no Windows installer; instead, you simply download the zip and run the application directly. Because our application contacts GitHub's servers to check for new releases on lauch, it is possible it will get flagged by firewall software &ndash; please allow it through so it can function correctly.

    #       ### macOS
    #       On macOS, after dragging the app from the dmg into Applications, please run `xattr -cr "/Applications/Serial Loops.app"` from the Terminal in order to be able to run the app. This is required because we currently don't codesign the application, meaning macOS will refuse to run it without explicit approval from you.

    #       #### Which macOS dmg should I choose?
    #       If your Mac is newer, you will probably want the ARM dmg. If it is older, you will want the x64 one. If unsure, download the ARM one first and attempt to run it &ndash; it will throw an error saying it can't be run on this computer if your computer is not able to run it. If that's the case, download the x64 one instead.

    #       ### Linux
    #       The `.deb` package is intended for Debian-based distros (e.g. Ubuntu). Install it with `sudo apt install -f ./SerialLoops-$(Version)_amd64.deb`.
    #       The `.rpm` package is intended for Red Hat distros (e.g. Fedora). Install it with `sudo dnf install ./SerialLoops-$(Version)-1.fc39.x86_64.rpm`.
    #       For other Linux distros, please use the binaries packaged in the `.tar.gz` archive; when doing so, ensure you install the OpenAL binaries so audio playback works.
    #     ${{ if eq(parameters['version'], '') }}:
    #       isPreRelease: true
    #     ${{ if ne(parameters['version'], '') }}:
    #       isPreRelease: false
