trigger:
- main
- release/*
pr:
- none

variables:
  - name: Version
    value: 0.1-pre$(Build.BuildNumber)

stages:
- stage: Build
  jobs:
  - job:
    strategy:
      matrix:
        Linux:
          imageName: 'ubuntu-latest'
          platformName: 'Gtk'
          artifactName: 'Linux-v$(Version)'
          framework: 'net6.0'
          rid: 'linux-x64'
          artifactPath: '$(Build.SourcesDirectory)/src/SerialLoops.$(platformName)/bin/Gtk/Release/net6.0/linux-x64/publish.tar.gz'
          secondArtifactPath: '$(Build.SourcesDirectory)/dpkg-build/SerialLoops.deb'
          extraPublishParams: ''
        macOS-x64:
          imageName: 'macOS-latest'
          platformName: 'Mac'
          artifactName: 'macOS-x64-v$(Version)'
          framework: 'net6.0'
          rid: 'osx-x64'
          artifactPath: '$(Build.SourcesDirectory)/src/SerialLoops.$(platformName)/bin/Mac/Release/net6.0/osx-x64/SerialLoops.Mac.dmg'
          secondArtifactPath: ''
          extraPublishParams: '/p:EnableDmgBuild=true'
        macOS-arm64:
          imageName: 'macOS-latest'
          platformName: 'Mac'
          artifactName: 'macOS-arm-v$(Version)'
          framework: 'net6.0'
          rid: 'osx-arm64'
          artifactPath: '$(Build.SourcesDirectory)/src/SerialLoops.$(platformName)/bin/Mac/Release/net6.0/osx-arm64/SerialLoops.Mac.dmg'
          secondArtifactPath: ''
          extraPublishParams: '/p:EnableDmgBuild=true'
        Windows:
          imageName: 'windows-latest'
          platformName: 'Wpf'
          artifactName: 'Windows-v$(Version)'
          framework: 'net6.0-windows'
          rid: 'win-x64'
          artifactPath: '$(Build.SourcesDirectory)/src/SerialLoops.$(platformName)/bin/Wpf/Release/net6.0-windows/win-x64/publish.zip'
          secondArtifactPath: ''
          extraPublishParams: ''
    displayName: Build & Publish
    pool:
      vmImage: $(imageName)
    steps:
    - checkout: self
      clean: true
      
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        projects: $(Build.SourcesDirectory)/src/SerialLoops.$(platformName)/SerialLoops.$(platformName).csproj
        arguments: '-c Release -f $(framework) -r $(rid) --self-contained /p:PublishSingleFile=true'
        publishWebProjects: false
      displayName: Build & Publish Serial Loops
      
    - pwsh: |
        Expand-Archive $(Build.SourcesDirectory)/src/SerialLoops.$(platformName)/bin/Gtk/Release/net6.0/linux-x64/publish.zip -DestinationPath $(Build.SourcesDirectory)/src/SerialLoops.$(platformName)/bin/Gtk/Release/net6.0/linux-x64/publish/
        chmod +x $(Build.SourcesDirectory)/src/SerialLoops.$(platformName)/bin/Gtk/Release/net6.0/linux-x64/publish/SerialLoops
        Push-Location $(Build.SourcesDirectory)/src/SerialLoops.$(platformName)/bin/Gtk/Release/net6.0/linux-x64/publish
        tar -czvf ../publish.tar.gz --transform 's,^\.\/,,' .
        Pop-Location
        mkdir -p dpkg-build/SerialLoops/DEBIAN
        mkdir -p dpkg-build/SerialLoops/usr/bin
        mkdir -p dpkg-build/SerialLoops/usr/lib/SerialLoops
        mkdir -p dpkg-build/SerialLoops/usr/share/applications
        Push-Location dpkg-build/SerialLoops
        Write-Output "Package: SerialLoops`nVersion: $(Version)`nSection: custom`nPriority: optional`nArchitecture: all`nEssential: no`nMaintainer: The Haroohie Translation Club <haroohietranslation@gmail.com>`nHomepage: https://haroohie.club/`nDescription: Editor for Suzumiya Haruhi no Chokuretsu`n" | Out-File -FilePath DEBIAN/control
        Write-Output "[Desktop Entry]`nVersion=$(Version)`nName=Serial Loops`nComment=Editor for Suzumiya Haruhi no Chokuretsu`nExec=/usr/bin/SerialLoops`nIcon=/usr/lib/SerialLoops/Icons/AppIcon.png`nTerminal=false`nType=Application`nCategories=Utility;Application;`n" | Out-File -FilePath usr/share/applications/SerialLoops.desktop
        chmod +x usr/share/applications/SerialLoops.desktop
        mv $(Build.SourcesDirectory)/src/SerialLoops.$(platformName)/bin/Gtk/Release/net6.0/linux-x64/publish/* usr/lib/SerialLoops
        ln -s /usr/lib/SerialLoops/SerialLoops usr/bin/SerialLoops
        cd ..
        dpkg-deb --build SerialLoops
      displayName: Create Linux tar and dpkg
      condition: eq(variables['rid'], 'linux-x64')

    # We need a second round of publishing to get dmg packing to work. Idk why, but it works if we do it this way lol
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        projects: $(Build.SourcesDirectory)/src/SerialLoops.$(platformName)/SerialLoops.$(platformName).csproj
        arguments: '-c Release -f $(framework) -r $(rid) --self-contained /p:PublishSingleFile=true $(extraPublishParams)'
        publishWebProjects: false
      displayName: Publishing Second Round
      condition: ne(variables['extraPublishParams'], '')

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(artifactPath)'
        ArtifactName: '$(artifactName)'
        publishLocation: 'Container'
      displayName: Publish build artifact

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(secondArtifactPath)'
        ArtifactName: '$(artifactName)-2'
        publishLocation: 'Container'
      displayName: Publish secondary build artifact
      condition: ne(variables['secondArtifactPath'], '')
- stage: Publish
  dependsOn: Build
  jobs:
  - job:
    pool:
      vmImage: ubuntu-latest
    displayName: Create Pre-Release
    dependsOn: 
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: Download Linux artifacts
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Linux-v$(Version)'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - task: DownloadBuildArtifacts@0
      displayName: Download Linux dpkg
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Linux-v$(Version)-2'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - task: DownloadBuildArtifacts@0
      displayName: Download macOS x64 artifacts
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'macOS-x64-v$(Version)'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - task: DownloadBuildArtifacts@0
      displayName: Download macOS ARM artifacts
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'macOS-arm-v$(Version)'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - task: DownloadBuildArtifacts@0
      displayName: Download Windows artifacts
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Windows-v$(Version)'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - pwsh: |
        Move-Item -Path $(Build.ArtifactStagingDirectory)/Linux-v$(Version)/publish.tar.gz -Destination $(Build.ArtifactStagingDirectory)/SerialLoops-linux-x64-v$(Version).tar.gz
        Move-Item -Path $(Build.ArtifactStagingDirectory)/Linux-v$(Version)-2/SerialLoops.deb -Destination $(Build.ArtifactStagingDirectory)/SerialLoops-$(Version)_amd64.deb
        Move-Item -Path $(Build.ArtifactStagingDirectory)/macOS-x64-v$(Version)/SerialLoops.Mac.dmg -Destination $(Build.ArtifactStagingDirectory)/SerialLoops-macOS-x64-v$(Version).dmg
        Move-Item -Path $(Build.ArtifactStagingDirectory)/macOS-arm-v$(Version)/SerialLoops.Mac.dmg -Destination $(Build.ArtifactStagingDirectory)/SerialLoops-macOS-arm-v$(Version).dmg
        Move-Item -Path $(Build.ArtifactStagingDirectory)/Windows-v$(Version)/publish.zip -Destination $(Build.ArtifactStagingDirectory)/SerialLoops-windows-x64-v$(Version).zip
      displayName: Move and rename artifacts
    - task: GitHubRelease@1
      displayName: 'Create GitHub Pre-Release'
      inputs:
        gitHubConnection: 'GitHub Connection (Jonko)'
        tagSource: userSpecifiedTag
        tag: '$(Version)'
        title: 'Serial Loops v$(Version)'
        releaseNotesSource: inline
        releaseNotesInline: |
          Latest build from main. Note that this is likely to have bugs and we recommend you use a regular release instead!

          ## Installation Notes
          On macOS, after dragging the app from the dmg into Applications, please run `xattr -cr /Applications/SerialLoops.Mac.app` from the Terminal in order to be able to run the app.
          This is required because we currently don't codesign the application, meaning macOS will refuse to run it without explicit approval from you.

          The `.deb` package can only be used on Debian-based systems (e.g. Ubuntu). Install it with `sudo dpkg -i SerialLoops-$(Version)_amd64.deb`. For other Linux distros, please use the
          binaries packaged in the `.tar.gz` archive. Regardless of your distro, ensure you install the OpenAL binaries so audio playback works &ndash; on Ubuntu, this can be done with
          `sudo apt install libopenal-dev`.

          Please ensure you have installed [devkitARM from devkitPro](https://devkitpro.org/wiki/Getting_Started) before using the program.

          ### Which macOS dmg should I choose?
          If your Mac is newer, you will probably want the ARM dmg. If it is older, you will want the x64 one. If unsure, download the ARM one first and attempt to run it &ndash; it will throw
          an error saying it can't be run on this computer if your computer is not able to run it. If that's the case, download the x64 one instead.
        isPreRelease: true